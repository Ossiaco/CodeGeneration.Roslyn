trigger:
  branches:
    include: ["master", "Ossiaco"]
  paths:
    exclude: ["doc", "*.md", ".appveyor.yml", ".travis.yml"]

variables:
- name: VmImage
  value: windows-latest
- name: BuildConfiguration 
  value: Release
- name: Env
  value: ci
- name: netCoreVersion
  value: 3.1.402
- name: nugetVersion
  value: 5.7.0
- name: MajorVersion
  value: 1
- name: MinorVersion
  value: 0
- name: PatchVersion
  value: 0

stages:
- stage: GetVersion
  displayName: Create Assembly Version
  
  jobs:
    - job: create_version
      displayName: Create Chorus Version
      continueOnError: false
      pool:
        vmImage: $(VmImage)

      steps:
      #versioning must follow https://semver.org/ otherwise msbuild fails
      #e.g. 3.0.0-1-100, 3.0.0-preview.1-100. Build portion is generated as part of prerelease ('.' separated) because it's being ignored in nuget package version (e.g. +1-100).
      - checkout: none

      - task: PowerShell@2
        name: powershell
        inputs:
          targetType: inline
          script: |
            [string] $major = '$(MajorVersion)'
            [string] $minor = '$(MinorVersion)'
            [string] $patch = '$(PatchVersion)'
            [string] $preRelease = ''
            [string] $buildNumber = '$(Build.BuildId)'
 
            $d1 = '2019-01-01'
            $d2 = [DateTime]::Today
            $ts = New-TimeSpan -Start $d1 -End $d2
            if (![string]::IsNullOrWhiteSpace($preRelease)) {
                $preRelease = '-{0}.' -f $preRelease.Trim()
            }
            $prefix = '{0}.{1}.{2}' -f $major.Trim(), $minor.Trim(), $patch.Trim()
            $patch = '{0}{1}{2}-{3}' -f $patch.Trim(), $preRelease, $ts.Days, $buildNumber
            $version = '{0}.{1}.{2}' -f $major.Trim(), $minor.Trim(), $patch.Trim()
            Write-Output ('chorus version prefix: {0}' -f $prefix);
            Write-Output ('chorus patch: {0}' -f $patch);
            Write-Output ('chorus version: {0}' -f $version);
            Write-Host "##vso[task.setvariable variable=versionPatch;isOutput=true]$patch"
            Write-Host "##vso[task.setvariable variable=versionPrefix;isOutput=true]$prefix"
            Write-Host "##vso[task.setvariable variable=buildVersion;isOutput=true]$version"

          failOnStderr: true
        displayName: Generate Chorus Version

- stage: Build_Solution
  displayName: Build Code Generator
  dependsOn: GetVersion
  variables:
  - name: versionPrefix
    value: $[ stageDependencies.GetVersion.create_version.outputs['powershell.versionPrefix'] ]
  - name: buildVersion
    value: $[ stageDependencies.GetVersion.create_version.outputs['powershell.buildVersion'] ]
  - name: versionPatch
    value: $[ stageDependencies.GetVersion.create_version.outputs['powershell.versionPatch'] ]

  jobs:
  - job: build_codegen_solution
    displayName: Build Code Generator
    continueOnError: false
    timeoutInMinutes: 30  
    pool:
      vmImage: $(VmImage)
  
    steps:

    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: $(netCoreVersion)
        installationPath: $(Agent.ToolsDirectory)/dotnet
        includePreviewVersions: true
        performMultiLevelLookup: true
 
    - checkout: self 
      submodules: recursive
      clean: true
      lfs: true
  
    - task: DotNetCoreCLI@2
      displayName: Build CodeGeneration.Chorus
      inputs:
        command: build
        projects: CodeGeneration.Chorus.sln
        arguments: --configuration $(BuildConfiguration) -p:OS=$(OS) -p:FileVersion=$(versionPrefix) -p:Version=$(buildVersion) -m:1 -nowarn:OCC001

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack $(buildConfiguration)'
      inputs:
          command: pack
          versioningScheme: byPrereleaseNumber
          majorVersion: '$(MajorVersion)'
          minorVersion: '$(MinorVersion)'
          patchVersion: '$(versionPatch)'