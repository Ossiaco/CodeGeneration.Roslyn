trigger:
  branches:
    include: ["master"]
  paths:
    exclude: ["doc", "*.md", ".appveyor.yml", ".travis.yml"]

variables:
#  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  BuildPlatform: Any CPU

resources:
  containers:
  - container: xenial
    image: andrewarnott/linux-buildagent

jobs:
- job: create_version
  displayName: Create Version
  continueOnError: false
  pool:
    vmImage: $(VmImage)

    steps:
    #versioning must follow https://semver.org/ otherwise msbuild fails
    #e.g. 3.0.0-1-100, 3.0.0-preview.1-100. Build portion is generated as part of prerelease ('.' separated) because it's being ignored in nuget package version (e.g. +1-100).
    - checkout: none

  - task: PowerShell@2
    name: powershell
    inputs:
        targetType: inline
        script: |
        [string] $major = '$(MajorVersion)'
        [string] $minor = '$(MinorVersion)'
        [string] $patch = '$(PatchVersion)'
        [string] $preRelease = '$(PreReleaseVersion)'
        [string] $buildNumber = '$(Build.BuildId)'

        if ([string]::IsNullOrWhiteSpace($major)) {
            throw "MajorVersion not informed. Please check Azure DevOps variable group 'ChorusVersion'."
        }
        if ([string]::IsNullOrWhiteSpace($minor)) {
            throw "MinorVersion not informed. Please check Azure DevOps variable group 'ChorusVersion'."
        }
        if ([string]::IsNullOrWhiteSpace($patch)) {
            throw "PatchVersion not informed. Please check Azure DevOps variable group 'ChorusVersion'."
        }

        $d1 = '2019-01-01'
        $d2 = [DateTime]::Today
        $ts = New-TimeSpan -Start $d1 -End $d2
        if (![string]::IsNullOrWhiteSpace($preRelease)) {
            $preRelease = '-{0}.' -f $preRelease.Trim()
        }
        $prefix = '{0}.{1}.{2}' -f $major.Trim(), $minor.Trim(), $patch.Trim()
        $version = '{0}.{1}.{2}{3}{4}-{5}' -f $major.Trim(), $minor.Trim(), $patch.Trim(), $preRelease, $ts.Days, $buildNumber
        Write-Output ('chorus version prefix: {0}' -f $prefix);
        Write-Output ('chorus version: {0}' -f $version);
        Write-Host "##vso[task.setvariable variable=versionPrefix;isOutput=true]$prefix"
        Write-Host "##vso[task.setvariable variable=buildVersion;isOutput=true]$version"

    failOnStderr: true
  displayName: Generate Chorus Version

- job: build_chorus_solution
  displayName: Build Chorus
  continueOnError: false
  timeoutInMinutes: 30  
  pool:
    vmImage: $(VmImage)

  steps:
  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: $(netCoreVersion)
      installationPath: $(Agent.ToolsDirectory)/dotnet
      includePreviewVersions: true
      performMultiLevelLookup: true

  - checkout: self 
    submodules: recursive
    clean: true
    lfs: true

  - task: DotNetCoreCLI@2
    displayName: Build Code Generator
    inputs:
      command: build
      projects: CodeGeneration.Roslyn.sln
      arguments: --configuration $(BuildConfiguration) -p:OS=$(OS) -p:FileVersion=$(versionPrefix) -p:Version=$(buildVersion) -m:1 -nowarn:OCC001
