// Copyright (c) Andrew Arnott. All rights reserved.
// Licensed under the MS-PL license. See LICENSE.txt file in the project root for full license information.

namespace CodeGeneration.Roslyn.Engine
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using CodeGeneration.Chorus;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Validation;

    /// <summary>
    /// The class responsible for generating compilation units to add to the project being built.
    /// </summary>
    public static class DocumentTransform
    {
        /// <summary>
        /// A "generated by tool" comment string with environment/os-normalized newlines.
        /// </summary>
        public static readonly string GeneratedByAToolPreamble = @"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Date: {0:R}
//     Version: {1}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
".Replace("\r\n", "\n").Replace("\n", Environment.NewLine); // normalize regardless of git checkout policy

        /// <summary>
        /// Produces a new document in response to any code generation attributes found in the specified document.
        /// </summary>
        /// <param name="compilation">The compilation to which the document belongs.</param>
        /// <param name="inputDocument">The document to scan for generator attributes.</param>
        /// <param name="projectDirectory">The path of the <c>.csproj</c> project file.</param>
        /// <param name="progress">Reports warnings and errors in code generation.</param>
        /// <returns>A task whose result is the generated document.</returns>
        public static async Task<SyntaxTree> TransformAsync(
            CSharpCompilation compilation,
            SyntaxTree inputDocument,
            string projectDirectory,
            IProgress<Diagnostic> progress)
        {
            Requires.NotNull(compilation, nameof(compilation));
            Requires.NotNull(inputDocument, nameof(inputDocument));

            var inputSemanticModel = compilation.GetSemanticModel(inputDocument);
            var inputCompilationUnit = inputDocument.GetCompilationUnitRoot();

            var emittedExterns = inputCompilationUnit
                .Externs
                .Select(x => x.WithoutTrivia())
                .ToImmutableArray();

            var emittedUsings = inputCompilationUnit
                .Usings
                .Select(x => x.WithoutTrivia())
                .ToImmutableArray();

            var emittedAttributeLists = ImmutableArray<AttributeListSyntax>.Empty;
            var emittedMembers = ImmutableArray<MemberDeclarationSyntax>.Empty;

            var root = await inputDocument.GetRootAsync();
            var memberNodes = root
                .DescendantNodesAndSelf(n => n is CompilationUnitSyntax || n is NamespaceDeclarationSyntax || n is TypeDeclarationSyntax)
                .OfType<CSharpSyntaxNode>();

            var version = typeof(CodeGeneration.Chorus.CodeGenerator).Assembly.GetName().Version.ToString();

            foreach (var memberNode in memberNodes)
            {
                var attributeData = GetAttributeData(compilation, inputSemanticModel, memberNode);
                var generators = FindCodeGenerators(compilation, attributeData);
                foreach (var generator in generators)
                {
                    var context = new TransformationContext(
                        memberNode,
                        inputSemanticModel,
                        compilation,
                        projectDirectory,
                        emittedUsings,
                        emittedExterns);

                    var richGenerator = generator as IRichCodeGenerator ?? new EnrichingCodeGeneratorProxy(generator);

                    var emitted = await richGenerator.GenerateRichAsync(context, progress, CancellationToken.None);

                    emittedExterns = emittedExterns.AddRange(emitted.Externs);
                    emittedUsings = emittedUsings.AddRange(emitted.Usings);
                    emittedAttributeLists = emittedAttributeLists.AddRange(emitted.AttributeLists);
                    emittedMembers = emittedMembers.AddRange(emitted.Members);
                }
            }

            var compilationUnit =
                SyntaxFactory.CompilationUnit(
                        SyntaxFactory.List(emittedExterns),
                        SyntaxFactory.List(emittedUsings),
                        SyntaxFactory.List(emittedAttributeLists),
                        SyntaxFactory.List(emittedMembers))
                    .WithLeadingTrivia(
                            SyntaxFactory.Comment(string.Format(GeneratedByAToolPreamble, DateTimeOffset.UtcNow, version)),
                            SyntaxFactory.ElasticCarriageReturnLineFeed,
                            SyntaxFactory.Trivia(SyntaxFactory.NullableDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.EnableKeyword), true)),
                            SyntaxFactory.ElasticCarriageReturnLineFeed,
                            SyntaxFactory.Trivia(GeneratePragmaWarningDirectiveTrivia("8019")))
                    .WithTrailingTrivia(SyntaxFactory.CarriageReturnLineFeed)
                    .NormalizeWhitespace();

            return compilationUnit.SyntaxTree;
        }

        private static PragmaWarningDirectiveTriviaSyntax GeneratePragmaWarningDirectiveTrivia(params string[] args)
            => SyntaxFactory.PragmaWarningDirectiveTrivia(
                SyntaxFactory.Token(SyntaxKind.HashToken),
                SyntaxFactory.Token(SyntaxKind.PragmaKeyword),
                SyntaxFactory.Token(SyntaxKind.WarningKeyword),
                SyntaxFactory.Token(SyntaxKind.DisableKeyword),
                SyntaxFactory.SeparatedList<ExpressionSyntax>().AddRange(args.Select(a => SyntaxFactory.IdentifierName(a))),
                SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken),
                default(bool));


        private static ImmutableArray<AttributeData> GetAttributeData(Compilation compilation, SemanticModel document, SyntaxNode syntaxNode)
        {
            Requires.NotNull(compilation, nameof(compilation));
            Requires.NotNull(document, nameof(document));
            Requires.NotNull(syntaxNode, nameof(syntaxNode));

            switch (syntaxNode)
            {
                case CompilationUnitSyntax syntax:
                    return compilation.Assembly.GetAttributes().Where(x => x.ApplicationSyntaxReference.SyntaxTree == syntax.SyntaxTree).ToImmutableArray();
                default:
                    return document.GetDeclaredSymbol(syntaxNode)?.GetAttributes() ?? ImmutableArray<AttributeData>.Empty;
            }
        }

        private static IEnumerable<ICodeGenerator> FindCodeGenerators(CSharpCompilation compilation, ImmutableArray<AttributeData> nodeAttributes)
        {
            foreach (var attributeData in nodeAttributes)
            {
                if (SymbolEqualityComparer.Default.Equals(attributeData.AttributeClass, compilation.GetTypeByMetadataName(typeof(GenerateClassAttribute).FullName)))
                {
                    yield return new CodeGenerator(attributeData);
                    break;
                }
            }
        }

        private static string GetFullTypeName(INamedTypeSymbol symbol)
        {
            Requires.NotNull(symbol, nameof(symbol));

            var nameBuilder = new StringBuilder();
            ISymbol symbolOrParent = symbol;
            while (symbolOrParent != null && !string.IsNullOrEmpty(symbolOrParent.Name))
            {
                if (nameBuilder.Length > 0)
                {
                    nameBuilder.Insert(0, ".");
                }

                nameBuilder.Insert(0, symbolOrParent.Name);
                symbolOrParent = symbolOrParent.ContainingSymbol;
            }

            return nameBuilder.ToString();
        }

        private class EnrichingCodeGeneratorProxy : IRichCodeGenerator
        {
            public EnrichingCodeGeneratorProxy(ICodeGenerator codeGenerator)
            {
                Requires.NotNull(codeGenerator, nameof(codeGenerator));
                CodeGenerator = codeGenerator;
            }

            private ICodeGenerator CodeGenerator { get; }

            public Task<SyntaxList<MemberDeclarationSyntax>> GenerateAsync(
                TransformationContext context,
                IProgress<Diagnostic> progress,
                CancellationToken cancellationToken)
            {
                return CodeGenerator.GenerateAsync(context, progress, cancellationToken);
            }

            public async Task<RichGenerationResult> GenerateRichAsync(TransformationContext context, IProgress<Diagnostic> progress, CancellationToken cancellationToken)
            {
                var generatedMembers = await CodeGenerator.GenerateAsync(context, progress, CancellationToken.None);

                // Figure out ancestry for the generated type, including nesting types and namespaces.
                var wrappedMembers = context.ProcessingNode.Ancestors().Aggregate(generatedMembers, WrapInAncestor);
                return new RichGenerationResult { Members = wrappedMembers };
            }

            private static SyntaxList<MemberDeclarationSyntax> WrapInAncestor(SyntaxList<MemberDeclarationSyntax> generatedMembers, SyntaxNode ancestor)
            {
                switch (ancestor)
                {
                    case NamespaceDeclarationSyntax ancestorNamespace:
                        generatedMembers = SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                            CopyAsAncestor(ancestorNamespace)
                            .WithMembers(generatedMembers));
                        break;
                    case ClassDeclarationSyntax nestingClass:
                        generatedMembers = SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                            CopyAsAncestor(nestingClass)
                            .WithMembers(generatedMembers));
                        break;
                    case StructDeclarationSyntax nestingStruct:
                        generatedMembers = SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                            CopyAsAncestor(nestingStruct)
                            .WithMembers(generatedMembers));
                        break;
                }
                return generatedMembers;
            }

            private static NamespaceDeclarationSyntax CopyAsAncestor(NamespaceDeclarationSyntax syntax)
            {
                return SyntaxFactory.NamespaceDeclaration(syntax.Name.WithoutTrivia())
                    .WithExterns(SyntaxFactory.List(syntax.Externs.Select(x => x.WithoutTrivia())))
                    .WithUsings(SyntaxFactory.List(syntax.Usings.Select(x => x.WithoutTrivia())));
            }

            private static ClassDeclarationSyntax CopyAsAncestor(ClassDeclarationSyntax syntax)
            {
                return SyntaxFactory.ClassDeclaration(syntax.Identifier.WithoutTrivia())
                    .WithModifiers(SyntaxFactory.TokenList(syntax.Modifiers.Select(x => x.WithoutTrivia())))
                    .WithTypeParameterList(syntax.TypeParameterList);
            }

            private static StructDeclarationSyntax CopyAsAncestor(StructDeclarationSyntax syntax)
            {
                return SyntaxFactory.StructDeclaration(syntax.Identifier.WithoutTrivia())
                    .WithModifiers(SyntaxFactory.TokenList(syntax.Modifiers.Select(x => x.WithoutTrivia())))
                    .WithTypeParameterList(syntax.TypeParameterList);
            }
        }
    }
}
